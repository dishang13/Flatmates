plugins {
    id 'java'
    id 'war'
}

group 'edu.vt'
version '1.0'

repositories {
    // Default Maven Central repository
    mavenCentral()

    // flat filesystem directory containing the JAR files
    flatDir {
        dirs 'C:/Users/disha/IdeaProjects/Flatmates/src/main/webapp/WEB-INF/lib'
    }
}

ext {
    junitVersion = '5.7.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // Java EE 8 dependency
    compileOnly group: 'javax', name: 'javaee-api', version: '8.0.1'

    // primefaces-7.0.7.jar is located in the flat filesystem directory defined above
    // primefaces-7.0.7.jar provides UI components for JSF
    compileOnly group: 'org.primefaces', name: 'primefaces', version: '7.0.7'

    // itext-2.1.7.jar is located in the flat filesystem directory defined above
    // itext-2.1.7.jar provides a Java API to generate PDF files.
    compileOnly group: 'com.lowagie', name: 'itext', version: '2.1.7'

    // poi-3.15.jar is located in the flat filesystem directory defined above
    // poi-3.15.jar provides a Java API to generate files in Microsoft format, e.g., Excel, CSV
    compileOnly group: 'org.apache.poi', name: 'poi', version: '3.15'

    // imgscalr-lib-4.2.jar is a simple and efficient best practice image-scaling and manipulation library implemented in pure Java
    // imgscalr-lib-4.2.jar is located in the flat filesystem directory defined above
    compileOnly group: 'org.imgscalr', name: 'imgscalr-lib', version: '4.2'

    // Java Architecture for XML Binding (JAXB) provides an API and tools that
    // automate the mapping between XML documents and Java objects.
    compileOnly group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    // MySQL JDBC Connector to Java is configured in WildFly
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.21'

    /*
     compileOnly — for dependencies that are necessary to compile your production code but shouldn’t be part of the runtime classpath
     implementation (supersedes compile) — used for compilation and runtime
     runtimeOnly (supersedes runtime) — only used at runtime, not for compilation

     testCompileOnly — same as compileOnly except it’s for the tests
     testImplementation — test equivalent of implementation
     testRuntimeOnly — test equivalent of runtimeOnly
     */

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}